{
  "name": "tipe",
  "version": "0.1.8",
  "description": "Simple, fast, extensible JavaScript type checker",
  "homepage": "https://github.com/3meters/tipe",
  "keywords": [
    "type",
    "typeof",
    "typecheck",
    "check"
  ],
  "author": {
    "name": "George Snelling",
    "email": "george@3meters.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/3meters/tipe.git"
  },
  "devDependencies": {
    "is": "*",
    "bench": "*"
  },
  "main": "tipe.js",
  "scripts": {
    "test": "node test.js"
  },
  "license": "MIT",
  "readmeFilename": "Readme.md",
  "readme": "#tipe\n\nSimple, fast, extensible javascript type checker.\n\n## Install with nodejs\n\n    npm install tipe\n    \n## Why tipe? \n\nSee \"is\" for a popular, reliable, battle-tested type-checker:  https://github.com/enricomarino/is.\n  \nIf you're unhappy with is, you should probably write your own type checker.  Tipe provides a few small features we found missing from is.  Feel free to rely on it as a module or to copy any ideas or source you find useful.  We certainly did.\n\n## String names for all types\nTipe includes a base method, tipe(value) which always returns a string, like typeof, for all valid identifiers, including custom tipes. We find this useful in switch statements.  \n\n```js\nvar tipe = require('tipe')\ntipe()              // 'undefined'\ntipe(null)          // 'null'\ntipe('foo')         // 'string'\ntipe(false)         // 'boolean'\ntipe(1)             // 'number'\ntipe({})            // 'object'\ntipe([])            // 'array'\ntipe(new Error())   // 'error'\nvar args, fn\nfn = function(){args = arguments}\ntipe(fn)            // 'function'\ntipe(args)          // 'arguments'\n```\n\n## Boolean test methods for each type\nFor each tipe there are two boolean test methods: tipe.tipename(value), and tipe.isTipename(value).  Some prefer the shorter version, others perfer methods names that are not reserved words.  \n```js\ntipe.boolean(false)       // true\ntipe.isBoolean(false)     // true\ntipe.error(new Error())   // true\ntipe.isError(new Error()) // true\n```\netc...  These appear automatically for custom types as well.  \n\n## Custom Types\nTipe lets you add your own custom types for any constructor. They work like any other type.  \n```js\nfunction Dog(){}\nvar fido = new Dog()\ntipe(fido)              // 'object'\ntipe.dog(fido)          // runtime exception: tipe has no method 'dog'\ntipe.addTipe('Dog', 'dog')\ntipe(fido)              // 'dog'\ntipe.dog(fido)          // true\ntipe.isDog(fido)        // true\n```\n\n## Performance\nTipe aims to be as fast as any pure javascript type checker can be.  For each internal type check, tipe chooses the fastest availble V8 expression to determine the result, no matter how strange that expresion may appear.  This is code you definitely don't want visible in your application :). Run \"node bench\" to see performance benchmarks vs is.  Tipe version 0.1.8 is roughly twice as fast as is version 0.2.6 in our admitted crude benchmark.\n\n## Dogfood\nWe rely heavily on this public version of tipe in a large-scale web service using ordinary npm. We welcome any improvements via email, bugs, or PRs.\n\n## Caveats\nTipe lacks many features of is and other type checkers such as equality tests and mathematical comparitors.  We use other libraries for those tasks.  At the margins, we have chosen performance over specificity for some types we consider edge cases, i.e. tipe(NaN) is 'number', not 'NaN'.\n\n## Copyright\nCopyright (c) 2013 3meters.  All rights reserverd.\n\n## License\nMIT\n",
  "bugs": {
    "url": "https://github.com/3meters/tipe/issues"
  },
  "_id": "tipe@0.1.8",
  "_from": "tipe@*"
}
